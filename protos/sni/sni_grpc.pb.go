// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sni

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevicesClient is the client API for Devices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesClient interface {
	ListDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
}

type devicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesClient(cc grpc.ClientConnInterface) DevicesClient {
	return &devicesClient{cc}
}

func (c *devicesClient) ListDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := c.cc.Invoke(ctx, "/Devices/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServer is the server API for Devices service.
// All implementations must embed UnimplementedDevicesServer
// for forward compatibility
type DevicesServer interface {
	ListDevices(context.Context, *DevicesRequest) (*DevicesResponse, error)
	mustEmbedUnimplementedDevicesServer()
}

// UnimplementedDevicesServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServer struct {
}

func (UnimplementedDevicesServer) ListDevices(context.Context, *DevicesRequest) (*DevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDevicesServer) mustEmbedUnimplementedDevicesServer() {}

// UnsafeDevicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServer will
// result in compilation errors.
type UnsafeDevicesServer interface {
	mustEmbedUnimplementedDevicesServer()
}

func RegisterDevicesServer(s grpc.ServiceRegistrar, srv DevicesServer) {
	s.RegisterService(&Devices_ServiceDesc, srv)
}

func _Devices_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Devices/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServer).ListDevices(ctx, req.(*DevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Devices_ServiceDesc is the grpc.ServiceDesc for Devices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Devices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Devices",
	HandlerType: (*DevicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _Devices_ListDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sni.proto",
}

// DeviceMemoryClient is the client API for DeviceMemory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceMemoryClient interface {
	Read(ctx context.Context, in *SingleReadMemoryRequest, opts ...grpc.CallOption) (*SingleReadMemoryResponse, error)
	Write(ctx context.Context, in *SingleWriteMemoryRequest, opts ...grpc.CallOption) (*SingleWriteMemoryResponse, error)
	MultiRead(ctx context.Context, in *MultiReadMemoryRequest, opts ...grpc.CallOption) (*MultiReadMemoryResponse, error)
	MultiWrite(ctx context.Context, in *MultiWriteMemoryRequest, opts ...grpc.CallOption) (*MultiWriteMemoryResponse, error)
}

type deviceMemoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceMemoryClient(cc grpc.ClientConnInterface) DeviceMemoryClient {
	return &deviceMemoryClient{cc}
}

func (c *deviceMemoryClient) Read(ctx context.Context, in *SingleReadMemoryRequest, opts ...grpc.CallOption) (*SingleReadMemoryResponse, error) {
	out := new(SingleReadMemoryResponse)
	err := c.cc.Invoke(ctx, "/DeviceMemory/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMemoryClient) Write(ctx context.Context, in *SingleWriteMemoryRequest, opts ...grpc.CallOption) (*SingleWriteMemoryResponse, error) {
	out := new(SingleWriteMemoryResponse)
	err := c.cc.Invoke(ctx, "/DeviceMemory/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMemoryClient) MultiRead(ctx context.Context, in *MultiReadMemoryRequest, opts ...grpc.CallOption) (*MultiReadMemoryResponse, error) {
	out := new(MultiReadMemoryResponse)
	err := c.cc.Invoke(ctx, "/DeviceMemory/MultiRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMemoryClient) MultiWrite(ctx context.Context, in *MultiWriteMemoryRequest, opts ...grpc.CallOption) (*MultiWriteMemoryResponse, error) {
	out := new(MultiWriteMemoryResponse)
	err := c.cc.Invoke(ctx, "/DeviceMemory/MultiWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceMemoryServer is the server API for DeviceMemory service.
// All implementations must embed UnimplementedDeviceMemoryServer
// for forward compatibility
type DeviceMemoryServer interface {
	Read(context.Context, *SingleReadMemoryRequest) (*SingleReadMemoryResponse, error)
	Write(context.Context, *SingleWriteMemoryRequest) (*SingleWriteMemoryResponse, error)
	MultiRead(context.Context, *MultiReadMemoryRequest) (*MultiReadMemoryResponse, error)
	MultiWrite(context.Context, *MultiWriteMemoryRequest) (*MultiWriteMemoryResponse, error)
	mustEmbedUnimplementedDeviceMemoryServer()
}

// UnimplementedDeviceMemoryServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceMemoryServer struct {
}

func (UnimplementedDeviceMemoryServer) Read(context.Context, *SingleReadMemoryRequest) (*SingleReadMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedDeviceMemoryServer) Write(context.Context, *SingleWriteMemoryRequest) (*SingleWriteMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedDeviceMemoryServer) MultiRead(context.Context, *MultiReadMemoryRequest) (*MultiReadMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiRead not implemented")
}
func (UnimplementedDeviceMemoryServer) MultiWrite(context.Context, *MultiWriteMemoryRequest) (*MultiWriteMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiWrite not implemented")
}
func (UnimplementedDeviceMemoryServer) mustEmbedUnimplementedDeviceMemoryServer() {}

// UnsafeDeviceMemoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceMemoryServer will
// result in compilation errors.
type UnsafeDeviceMemoryServer interface {
	mustEmbedUnimplementedDeviceMemoryServer()
}

func RegisterDeviceMemoryServer(s grpc.ServiceRegistrar, srv DeviceMemoryServer) {
	s.RegisterService(&DeviceMemory_ServiceDesc, srv)
}

func _DeviceMemory_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleReadMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMemoryServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceMemory/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMemoryServer).Read(ctx, req.(*SingleReadMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMemory_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleWriteMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMemoryServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceMemory/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMemoryServer).Write(ctx, req.(*SingleWriteMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMemory_MultiRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiReadMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMemoryServer).MultiRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceMemory/MultiRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMemoryServer).MultiRead(ctx, req.(*MultiReadMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMemory_MultiWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiWriteMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMemoryServer).MultiWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeviceMemory/MultiWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMemoryServer).MultiWrite(ctx, req.(*MultiWriteMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceMemory_ServiceDesc is the grpc.ServiceDesc for DeviceMemory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceMemory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeviceMemory",
	HandlerType: (*DeviceMemoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _DeviceMemory_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _DeviceMemory_Write_Handler,
		},
		{
			MethodName: "MultiRead",
			Handler:    _DeviceMemory_MultiRead_Handler,
		},
		{
			MethodName: "MultiWrite",
			Handler:    _DeviceMemory_MultiWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sni.proto",
}
