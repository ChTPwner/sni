syntax = "proto3";

option go_package = "github.com/alttpo/sni/protos/sni";

service Devices {
  rpc ListDevices(DevicesRequest) returns (DevicesResponse) {}
}

// capabilities of a SNES device [32-bit bit field]
enum DeviceCapability {
  NONE = 0x00;
  READ = 0x01; // can read
  WRITE = 0x02; // can write
  EXEC_ASM = 0x04; // can execute custom ASM
  RESET = 0x08; // can reset system
  PAUSE = 0x10; // can pause emulation
  // TODO: capabilities for dealing with ROMs on filesystems: upload, download, mkdir, ls, boot, etc.
}
message DevicesRequest {
  // optional list of device kind filters
  repeated string kinds = 1;
}
message DevicesResponse {
  message Device {
    // a URI that describes exactly how to connect to the device, e.g. udp://localhost:55355 for RetroArch, file://dev/usb.ttyS0, file://COM4
    // this can also be used as a unique identifier for the device for clients to refer to
    string uri = 1;
    // friendly display name of the device
    string displayName = 2;
    // device kind, e.g. "fxpakpro", "retroarch", "lua"
    string kind = 3;
    // use DeviceCapability enum as bit field, ORing values together
    int32 capabilities = 4;
  }

  repeated Device devices = 1;
}

service DeviceMemory {
  rpc Read(SingleReadMemoryRequest) returns (SingleReadMemoryResponse) {}
  rpc Write(SingleWriteMemoryRequest) returns (SingleWriteMemoryResponse) {}
  rpc MultiRead(MultiReadMemoryRequest) returns (MultiReadMemoryResponse) {}
  rpc MultiWrite(MultiWriteMemoryRequest) returns (MultiWriteMemoryResponse) {}
  // TODO: streaming
}

message ReadMemoryRequest {
  uint32 address = 1;
  uint32 size = 2;
}
message ReadMemoryResponse {
  uint32 address = 1;
  bytes data = 2;
}
message WriteMemoryRequest {
  uint32 address = 1;
  bytes data = 2;
}
message WriteMemoryResponse {
  uint32 address = 1;
  uint32 size = 2;
}


message SingleReadMemoryRequest {
  string uri = 1;
  ReadMemoryRequest request = 2;
}
message SingleReadMemoryResponse {
  string uri = 1;
  ReadMemoryResponse response = 2;
}

message SingleWriteMemoryRequest {
  string uri = 1;
  WriteMemoryRequest request = 2;
}
message SingleWriteMemoryResponse {
  string uri = 1;
  WriteMemoryResponse response = 2;
}

message MultiReadMemoryRequest {
  string uri = 1;
  repeated ReadMemoryRequest requests = 2;
}
message MultiReadMemoryResponse {
  string uri = 1;
  repeated ReadMemoryResponse responses = 2;
}

message MultiWriteMemoryRequest {
  string uri = 1;
  repeated WriteMemoryRequest requests = 2;
}
message MultiWriteMemoryResponse {
  string uri = 1;
  repeated WriteMemoryResponse responses = 2;
}
