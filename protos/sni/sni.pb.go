// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.0
// source: sni.proto

package sni

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// address space used to interpret an address in:
type AddressSpace int32

const (
	// The default is the FX Pak Pro / SD2SNES's address space:
	// $00_0000..$DF_FFFF =   ROM contents, linearly mapped
	// $E0_0000..$EF_FFFF =  SRAM contents, linearly mapped
	// $F5_0000..$F6_FFFF =  WRAM contents, linearly mapped
	// $F7_0000..$F7_FFFF =  VRAM contents, linearly mapped
	// $F8_0000..$F8_FFFF =   APU contents, linearly mapped
	// $F9_0000..$F9_01FF = CGRAM contents, linearly mapped
	// $F9_0200..$F9_041F =   OAM contents, linearly mapped
	// $F9_0420..$F9_04FF =  MISC contents, linearly mapped
	// $F9_0500..$F9_06FF =         PPUREG, linearly mapped
	// $F9_0700..$F9_08FF =         CPUREG, linearly mapped
	// translated device address depends on device being talked to and its current MemoryMapping mode
	AddressSpace_FxPakPro AddressSpace = 0
	// The SNES's main A-bus; address depends on device's current MemoryMapping mode, e.g. LoROM, HiROM, ExHiROM, etc.
	AddressSpace_SnesABus AddressSpace = 1
	// Do not do any address translation; simply pass the raw address to the device as-is:
	AddressSpace_Raw AddressSpace = 2
)

// Enum value maps for AddressSpace.
var (
	AddressSpace_name = map[int32]string{
		0: "FxPakPro",
		1: "SnesABus",
		2: "Raw",
	}
	AddressSpace_value = map[string]int32{
		"FxPakPro": 0,
		"SnesABus": 1,
		"Raw":      2,
	}
)

func (x AddressSpace) Enum() *AddressSpace {
	p := new(AddressSpace)
	*p = x
	return p
}

func (x AddressSpace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressSpace) Descriptor() protoreflect.EnumDescriptor {
	return file_sni_proto_enumTypes[0].Descriptor()
}

func (AddressSpace) Type() protoreflect.EnumType {
	return &file_sni_proto_enumTypes[0]
}

func (x AddressSpace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressSpace.Descriptor instead.
func (AddressSpace) EnumDescriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{0}
}

// memory mapping mode of a ROM cart:
type MemoryMapping int32

const (
	MemoryMapping_Unknown MemoryMapping = 0
	MemoryMapping_HiROM   MemoryMapping = 1
	MemoryMapping_LoROM   MemoryMapping = 2
	MemoryMapping_ExHiROM MemoryMapping = 3 // (48-64Mbit)
)

// Enum value maps for MemoryMapping.
var (
	MemoryMapping_name = map[int32]string{
		0: "Unknown",
		1: "HiROM",
		2: "LoROM",
		3: "ExHiROM",
	}
	MemoryMapping_value = map[string]int32{
		"Unknown": 0,
		"HiROM":   1,
		"LoROM":   2,
		"ExHiROM": 3,
	}
)

func (x MemoryMapping) Enum() *MemoryMapping {
	p := new(MemoryMapping)
	*p = x
	return p
}

func (x MemoryMapping) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryMapping) Descriptor() protoreflect.EnumDescriptor {
	return file_sni_proto_enumTypes[1].Descriptor()
}

func (MemoryMapping) Type() protoreflect.EnumType {
	return &file_sni_proto_enumTypes[1]
}

func (x MemoryMapping) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemoryMapping.Descriptor instead.
func (MemoryMapping) EnumDescriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{1}
}

// capabilities of a SNES device [32-bit bit field]
type DeviceCapability int32

const (
	DeviceCapability_None           DeviceCapability = 0
	DeviceCapability_ReadMemory     DeviceCapability = 1
	DeviceCapability_WriteMemory    DeviceCapability = 2
	DeviceCapability_ExecuteASM     DeviceCapability = 3
	DeviceCapability_ResetSystem    DeviceCapability = 4
	DeviceCapability_PauseEmulation DeviceCapability = 5
)

// Enum value maps for DeviceCapability.
var (
	DeviceCapability_name = map[int32]string{
		0: "None",
		1: "ReadMemory",
		2: "WriteMemory",
		3: "ExecuteASM",
		4: "ResetSystem",
		5: "PauseEmulation",
	}
	DeviceCapability_value = map[string]int32{
		"None":           0,
		"ReadMemory":     1,
		"WriteMemory":    2,
		"ExecuteASM":     3,
		"ResetSystem":    4,
		"PauseEmulation": 5,
	}
)

func (x DeviceCapability) Enum() *DeviceCapability {
	p := new(DeviceCapability)
	*p = x
	return p
}

func (x DeviceCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_sni_proto_enumTypes[2].Descriptor()
}

func (DeviceCapability) Type() protoreflect.EnumType {
	return &file_sni_proto_enumTypes[2]
}

func (x DeviceCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceCapability.Descriptor instead.
func (DeviceCapability) EnumDescriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{2}
}

type DevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional list of device kind filters
	Kinds []string `protobuf:"bytes,1,rep,name=kinds,proto3" json:"kinds,omitempty"` // TODO: repeated DeviceCapability capabilities;
}

func (x *DevicesRequest) Reset() {
	*x = DevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesRequest) ProtoMessage() {}

func (x *DevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesRequest.ProtoReflect.Descriptor instead.
func (*DevicesRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{0}
}

func (x *DevicesRequest) GetKinds() []string {
	if x != nil {
		return x.Kinds
	}
	return nil
}

type DevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DevicesResponse_Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *DevicesResponse) Reset() {
	*x = DevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesResponse) ProtoMessage() {}

func (x *DevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesResponse.ProtoReflect.Descriptor instead.
func (*DevicesResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{1}
}

func (x *DevicesResponse) GetDevices() []*DevicesResponse_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type DetectMemoryMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// optional fallback value to set in case detection fails for some reason
	FallbackMemoryMapping *MemoryMapping `protobuf:"varint,2,opt,name=fallbackMemoryMapping,proto3,enum=MemoryMapping,oneof" json:"fallbackMemoryMapping,omitempty"`
	// optional ROM header (from bus address $00:FFC0, size 32 or 64 bytes) to use for detection
	// if not provided, the header will be read from the device
	RomHeader00FFC0 []byte `protobuf:"bytes,3,opt,name=romHeader00FFC0,proto3,oneof" json:"romHeader00FFC0,omitempty"`
}

func (x *DetectMemoryMappingRequest) Reset() {
	*x = DetectMemoryMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectMemoryMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectMemoryMappingRequest) ProtoMessage() {}

func (x *DetectMemoryMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectMemoryMappingRequest.ProtoReflect.Descriptor instead.
func (*DetectMemoryMappingRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{2}
}

func (x *DetectMemoryMappingRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DetectMemoryMappingRequest) GetFallbackMemoryMapping() MemoryMapping {
	if x != nil && x.FallbackMemoryMapping != nil {
		return *x.FallbackMemoryMapping
	}
	return MemoryMapping_Unknown
}

func (x *DetectMemoryMappingRequest) GetRomHeader00FFC0() []byte {
	if x != nil {
		return x.RomHeader00FFC0
	}
	return nil
}

type SetMemoryMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri           string        `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	MemoryMapping MemoryMapping `protobuf:"varint,2,opt,name=memoryMapping,proto3,enum=MemoryMapping" json:"memoryMapping,omitempty"`
}

func (x *SetMemoryMappingRequest) Reset() {
	*x = SetMemoryMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMemoryMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMemoryMappingRequest) ProtoMessage() {}

func (x *SetMemoryMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMemoryMappingRequest.ProtoReflect.Descriptor instead.
func (*SetMemoryMappingRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{3}
}

func (x *SetMemoryMappingRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SetMemoryMappingRequest) GetMemoryMapping() MemoryMapping {
	if x != nil {
		return x.MemoryMapping
	}
	return MemoryMapping_Unknown
}

type GetMemoryMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GetMemoryMappingRequest) Reset() {
	*x = GetMemoryMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMemoryMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryMappingRequest) ProtoMessage() {}

func (x *GetMemoryMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryMappingRequest.ProtoReflect.Descriptor instead.
func (*GetMemoryMappingRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{4}
}

func (x *GetMemoryMappingRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type MemoryMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri           string        `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	MemoryMapping MemoryMapping `protobuf:"varint,2,opt,name=memoryMapping,proto3,enum=MemoryMapping" json:"memoryMapping,omitempty"`
}

func (x *MemoryMappingResponse) Reset() {
	*x = MemoryMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryMappingResponse) ProtoMessage() {}

func (x *MemoryMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryMappingResponse.ProtoReflect.Descriptor instead.
func (*MemoryMappingResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{5}
}

func (x *MemoryMappingResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MemoryMappingResponse) GetMemoryMapping() MemoryMapping {
	if x != nil {
		return x.MemoryMapping
	}
	return MemoryMapping_Unknown
}

type ReadMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAddress      uint32       `protobuf:"varint,1,opt,name=requestAddress,proto3" json:"requestAddress,omitempty"`
	RequestAddressSpace AddressSpace `protobuf:"varint,2,opt,name=requestAddressSpace,proto3,enum=AddressSpace" json:"requestAddressSpace,omitempty"`
	Size                uint32       `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ReadMemoryRequest) Reset() {
	*x = ReadMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMemoryRequest) ProtoMessage() {}

func (x *ReadMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMemoryRequest.ProtoReflect.Descriptor instead.
func (*ReadMemoryRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{6}
}

func (x *ReadMemoryRequest) GetRequestAddress() uint32 {
	if x != nil {
		return x.RequestAddress
	}
	return 0
}

func (x *ReadMemoryRequest) GetRequestAddressSpace() AddressSpace {
	if x != nil {
		return x.RequestAddressSpace
	}
	return AddressSpace_FxPakPro
}

func (x *ReadMemoryRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ReadMemoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAddress      uint32       `protobuf:"varint,1,opt,name=requestAddress,proto3" json:"requestAddress,omitempty"`
	RequestAddressSpace AddressSpace `protobuf:"varint,2,opt,name=requestAddressSpace,proto3,enum=AddressSpace" json:"requestAddressSpace,omitempty"`
	// the address sent to the device and its space
	DeviceAddress      uint32       `protobuf:"varint,3,opt,name=deviceAddress,proto3" json:"deviceAddress,omitempty"`
	DeviceAddressSpace AddressSpace `protobuf:"varint,4,opt,name=deviceAddressSpace,proto3,enum=AddressSpace" json:"deviceAddressSpace,omitempty"`
	Data               []byte       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReadMemoryResponse) Reset() {
	*x = ReadMemoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMemoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMemoryResponse) ProtoMessage() {}

func (x *ReadMemoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMemoryResponse.ProtoReflect.Descriptor instead.
func (*ReadMemoryResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{7}
}

func (x *ReadMemoryResponse) GetRequestAddress() uint32 {
	if x != nil {
		return x.RequestAddress
	}
	return 0
}

func (x *ReadMemoryResponse) GetRequestAddressSpace() AddressSpace {
	if x != nil {
		return x.RequestAddressSpace
	}
	return AddressSpace_FxPakPro
}

func (x *ReadMemoryResponse) GetDeviceAddress() uint32 {
	if x != nil {
		return x.DeviceAddress
	}
	return 0
}

func (x *ReadMemoryResponse) GetDeviceAddressSpace() AddressSpace {
	if x != nil {
		return x.DeviceAddressSpace
	}
	return AddressSpace_FxPakPro
}

func (x *ReadMemoryResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WriteMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAddress      uint32       `protobuf:"varint,1,opt,name=requestAddress,proto3" json:"requestAddress,omitempty"`
	RequestAddressSpace AddressSpace `protobuf:"varint,2,opt,name=requestAddressSpace,proto3,enum=AddressSpace" json:"requestAddressSpace,omitempty"`
	Data                []byte       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WriteMemoryRequest) Reset() {
	*x = WriteMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMemoryRequest) ProtoMessage() {}

func (x *WriteMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMemoryRequest.ProtoReflect.Descriptor instead.
func (*WriteMemoryRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{8}
}

func (x *WriteMemoryRequest) GetRequestAddress() uint32 {
	if x != nil {
		return x.RequestAddress
	}
	return 0
}

func (x *WriteMemoryRequest) GetRequestAddressSpace() AddressSpace {
	if x != nil {
		return x.RequestAddressSpace
	}
	return AddressSpace_FxPakPro
}

func (x *WriteMemoryRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WriteMemoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAddress      uint32       `protobuf:"varint,1,opt,name=requestAddress,proto3" json:"requestAddress,omitempty"`
	RequestAddressSpace AddressSpace `protobuf:"varint,2,opt,name=requestAddressSpace,proto3,enum=AddressSpace" json:"requestAddressSpace,omitempty"`
	DeviceAddress       uint32       `protobuf:"varint,3,opt,name=deviceAddress,proto3" json:"deviceAddress,omitempty"`
	DeviceAddressSpace  AddressSpace `protobuf:"varint,4,opt,name=deviceAddressSpace,proto3,enum=AddressSpace" json:"deviceAddressSpace,omitempty"`
	Size                uint32       `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *WriteMemoryResponse) Reset() {
	*x = WriteMemoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMemoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMemoryResponse) ProtoMessage() {}

func (x *WriteMemoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMemoryResponse.ProtoReflect.Descriptor instead.
func (*WriteMemoryResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{9}
}

func (x *WriteMemoryResponse) GetRequestAddress() uint32 {
	if x != nil {
		return x.RequestAddress
	}
	return 0
}

func (x *WriteMemoryResponse) GetRequestAddressSpace() AddressSpace {
	if x != nil {
		return x.RequestAddressSpace
	}
	return AddressSpace_FxPakPro
}

func (x *WriteMemoryResponse) GetDeviceAddress() uint32 {
	if x != nil {
		return x.DeviceAddress
	}
	return 0
}

func (x *WriteMemoryResponse) GetDeviceAddressSpace() AddressSpace {
	if x != nil {
		return x.DeviceAddressSpace
	}
	return AddressSpace_FxPakPro
}

func (x *WriteMemoryResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SingleReadMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri     string             `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Request *ReadMemoryRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SingleReadMemoryRequest) Reset() {
	*x = SingleReadMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleReadMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleReadMemoryRequest) ProtoMessage() {}

func (x *SingleReadMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleReadMemoryRequest.ProtoReflect.Descriptor instead.
func (*SingleReadMemoryRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{10}
}

func (x *SingleReadMemoryRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SingleReadMemoryRequest) GetRequest() *ReadMemoryRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type SingleReadMemoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri      string              `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Response *ReadMemoryResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SingleReadMemoryResponse) Reset() {
	*x = SingleReadMemoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleReadMemoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleReadMemoryResponse) ProtoMessage() {}

func (x *SingleReadMemoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleReadMemoryResponse.ProtoReflect.Descriptor instead.
func (*SingleReadMemoryResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{11}
}

func (x *SingleReadMemoryResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SingleReadMemoryResponse) GetResponse() *ReadMemoryResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type SingleWriteMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri     string              `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Request *WriteMemoryRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *SingleWriteMemoryRequest) Reset() {
	*x = SingleWriteMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWriteMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWriteMemoryRequest) ProtoMessage() {}

func (x *SingleWriteMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWriteMemoryRequest.ProtoReflect.Descriptor instead.
func (*SingleWriteMemoryRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{12}
}

func (x *SingleWriteMemoryRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SingleWriteMemoryRequest) GetRequest() *WriteMemoryRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type SingleWriteMemoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri      string               `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Response *WriteMemoryResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SingleWriteMemoryResponse) Reset() {
	*x = SingleWriteMemoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleWriteMemoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleWriteMemoryResponse) ProtoMessage() {}

func (x *SingleWriteMemoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleWriteMemoryResponse.ProtoReflect.Descriptor instead.
func (*SingleWriteMemoryResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{13}
}

func (x *SingleWriteMemoryResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *SingleWriteMemoryResponse) GetResponse() *WriteMemoryResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type MultiReadMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri      string               `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Requests []*ReadMemoryRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *MultiReadMemoryRequest) Reset() {
	*x = MultiReadMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiReadMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiReadMemoryRequest) ProtoMessage() {}

func (x *MultiReadMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiReadMemoryRequest.ProtoReflect.Descriptor instead.
func (*MultiReadMemoryRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{14}
}

func (x *MultiReadMemoryRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MultiReadMemoryRequest) GetRequests() []*ReadMemoryRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type MultiReadMemoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri       string                `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Responses []*ReadMemoryResponse `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *MultiReadMemoryResponse) Reset() {
	*x = MultiReadMemoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiReadMemoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiReadMemoryResponse) ProtoMessage() {}

func (x *MultiReadMemoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiReadMemoryResponse.ProtoReflect.Descriptor instead.
func (*MultiReadMemoryResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{15}
}

func (x *MultiReadMemoryResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MultiReadMemoryResponse) GetResponses() []*ReadMemoryResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type MultiWriteMemoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri      string                `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Requests []*WriteMemoryRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *MultiWriteMemoryRequest) Reset() {
	*x = MultiWriteMemoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWriteMemoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWriteMemoryRequest) ProtoMessage() {}

func (x *MultiWriteMemoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWriteMemoryRequest.ProtoReflect.Descriptor instead.
func (*MultiWriteMemoryRequest) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{16}
}

func (x *MultiWriteMemoryRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MultiWriteMemoryRequest) GetRequests() []*WriteMemoryRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type MultiWriteMemoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri       string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Responses []*WriteMemoryResponse `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *MultiWriteMemoryResponse) Reset() {
	*x = MultiWriteMemoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWriteMemoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWriteMemoryResponse) ProtoMessage() {}

func (x *MultiWriteMemoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWriteMemoryResponse.ProtoReflect.Descriptor instead.
func (*MultiWriteMemoryResponse) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{17}
}

func (x *MultiWriteMemoryResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *MultiWriteMemoryResponse) GetResponses() []*WriteMemoryResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type DevicesResponse_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI that describes exactly how to connect to the device, e.g.:
	// RetroArch:  "ra://127.0.0.1:55355"
	// FX Pak Pro: "fxpakpro:///dev/cu.usbmodemDEMO000000001" (MacOS)
	//             "fxpakpro://COM4"                          (Windows)
	// uri is used as the unique identifier of the device for clients to refer to
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// friendly display name of the device
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// device kind, e.g. "fxpakpro", "retroarch", "lua"
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// all device capabilities:
	Capabilities []DeviceCapability `protobuf:"varint,4,rep,packed,name=capabilities,proto3,enum=DeviceCapability" json:"capabilities,omitempty"`
	// default address space for the device:
	DefaultAddressSpace AddressSpace `protobuf:"varint,5,opt,name=defaultAddressSpace,proto3,enum=AddressSpace" json:"defaultAddressSpace,omitempty"`
}

func (x *DevicesResponse_Device) Reset() {
	*x = DevicesResponse_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sni_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesResponse_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesResponse_Device) ProtoMessage() {}

func (x *DevicesResponse_Device) ProtoReflect() protoreflect.Message {
	mi := &file_sni_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesResponse_Device.ProtoReflect.Descriptor instead.
func (*DevicesResponse_Device) Descriptor() ([]byte, []int) {
	return file_sni_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DevicesResponse_Device) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DevicesResponse_Device) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DevicesResponse_Device) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DevicesResponse_Device) GetCapabilities() []DeviceCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *DevicesResponse_Device) GetDefaultAddressSpace() AddressSpace {
	if x != nil {
		return x.DefaultAddressSpace
	}
	return AddressSpace_FxPakPro
}

var File_sni_proto protoreflect.FileDescriptor

var file_sni_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x69,
	0x6e, 0x64, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x35, 0x0a,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x49, 0x0a, 0x15, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x15, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x30, 0x30,
	0x46, 0x46, 0x43, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x6f,
	0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x30, 0x30, 0x46, 0x46, 0x43, 0x30, 0x88, 0x01, 0x01,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x30, 0x30, 0x46, 0x46, 0x43, 0x30, 0x22, 0x61,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x0d, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x22, 0x2b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x5f,
	0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x0d, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22,
	0x90, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x12,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xf7, 0x01, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x13, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x59, 0x0a, 0x17, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x18, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5f, 0x0a, 0x19, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x30, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5a, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2e, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x5e, 0x0a,
	0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x5c, 0x0a,
	0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2a, 0x33, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x78, 0x50, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x6e, 0x65, 0x73, 0x41, 0x42, 0x75, 0x73, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x61, 0x77,
	0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x69, 0x52, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x6f, 0x52, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x48, 0x69, 0x52, 0x4f,
	0x4d, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x53, 0x4d,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x32, 0x3d, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x0f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xee, 0x03, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x18, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x12,
	0x18, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x18, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x64, 0x12, 0x17, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x18, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x74, 0x74, 0x70, 0x6f, 0x2f, 0x73, 0x6e, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x6e, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sni_proto_rawDescOnce sync.Once
	file_sni_proto_rawDescData = file_sni_proto_rawDesc
)

func file_sni_proto_rawDescGZIP() []byte {
	file_sni_proto_rawDescOnce.Do(func() {
		file_sni_proto_rawDescData = protoimpl.X.CompressGZIP(file_sni_proto_rawDescData)
	})
	return file_sni_proto_rawDescData
}

var file_sni_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_sni_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_sni_proto_goTypes = []interface{}{
	(AddressSpace)(0),                  // 0: AddressSpace
	(MemoryMapping)(0),                 // 1: MemoryMapping
	(DeviceCapability)(0),              // 2: DeviceCapability
	(*DevicesRequest)(nil),             // 3: DevicesRequest
	(*DevicesResponse)(nil),            // 4: DevicesResponse
	(*DetectMemoryMappingRequest)(nil), // 5: DetectMemoryMappingRequest
	(*SetMemoryMappingRequest)(nil),    // 6: SetMemoryMappingRequest
	(*GetMemoryMappingRequest)(nil),    // 7: GetMemoryMappingRequest
	(*MemoryMappingResponse)(nil),      // 8: MemoryMappingResponse
	(*ReadMemoryRequest)(nil),          // 9: ReadMemoryRequest
	(*ReadMemoryResponse)(nil),         // 10: ReadMemoryResponse
	(*WriteMemoryRequest)(nil),         // 11: WriteMemoryRequest
	(*WriteMemoryResponse)(nil),        // 12: WriteMemoryResponse
	(*SingleReadMemoryRequest)(nil),    // 13: SingleReadMemoryRequest
	(*SingleReadMemoryResponse)(nil),   // 14: SingleReadMemoryResponse
	(*SingleWriteMemoryRequest)(nil),   // 15: SingleWriteMemoryRequest
	(*SingleWriteMemoryResponse)(nil),  // 16: SingleWriteMemoryResponse
	(*MultiReadMemoryRequest)(nil),     // 17: MultiReadMemoryRequest
	(*MultiReadMemoryResponse)(nil),    // 18: MultiReadMemoryResponse
	(*MultiWriteMemoryRequest)(nil),    // 19: MultiWriteMemoryRequest
	(*MultiWriteMemoryResponse)(nil),   // 20: MultiWriteMemoryResponse
	(*DevicesResponse_Device)(nil),     // 21: DevicesResponse.Device
}
var file_sni_proto_depIdxs = []int32{
	21, // 0: DevicesResponse.devices:type_name -> DevicesResponse.Device
	1,  // 1: DetectMemoryMappingRequest.fallbackMemoryMapping:type_name -> MemoryMapping
	1,  // 2: SetMemoryMappingRequest.memoryMapping:type_name -> MemoryMapping
	1,  // 3: MemoryMappingResponse.memoryMapping:type_name -> MemoryMapping
	0,  // 4: ReadMemoryRequest.requestAddressSpace:type_name -> AddressSpace
	0,  // 5: ReadMemoryResponse.requestAddressSpace:type_name -> AddressSpace
	0,  // 6: ReadMemoryResponse.deviceAddressSpace:type_name -> AddressSpace
	0,  // 7: WriteMemoryRequest.requestAddressSpace:type_name -> AddressSpace
	0,  // 8: WriteMemoryResponse.requestAddressSpace:type_name -> AddressSpace
	0,  // 9: WriteMemoryResponse.deviceAddressSpace:type_name -> AddressSpace
	9,  // 10: SingleReadMemoryRequest.request:type_name -> ReadMemoryRequest
	10, // 11: SingleReadMemoryResponse.response:type_name -> ReadMemoryResponse
	11, // 12: SingleWriteMemoryRequest.request:type_name -> WriteMemoryRequest
	12, // 13: SingleWriteMemoryResponse.response:type_name -> WriteMemoryResponse
	9,  // 14: MultiReadMemoryRequest.requests:type_name -> ReadMemoryRequest
	10, // 15: MultiReadMemoryResponse.responses:type_name -> ReadMemoryResponse
	11, // 16: MultiWriteMemoryRequest.requests:type_name -> WriteMemoryRequest
	12, // 17: MultiWriteMemoryResponse.responses:type_name -> WriteMemoryResponse
	2,  // 18: DevicesResponse.Device.capabilities:type_name -> DeviceCapability
	0,  // 19: DevicesResponse.Device.defaultAddressSpace:type_name -> AddressSpace
	3,  // 20: Devices.ListDevices:input_type -> DevicesRequest
	5,  // 21: DeviceMemory.MappingDetect:input_type -> DetectMemoryMappingRequest
	6,  // 22: DeviceMemory.MappingSet:input_type -> SetMemoryMappingRequest
	7,  // 23: DeviceMemory.MappingGet:input_type -> GetMemoryMappingRequest
	13, // 24: DeviceMemory.SingleRead:input_type -> SingleReadMemoryRequest
	15, // 25: DeviceMemory.SingleWrite:input_type -> SingleWriteMemoryRequest
	17, // 26: DeviceMemory.MultiRead:input_type -> MultiReadMemoryRequest
	19, // 27: DeviceMemory.MultiWrite:input_type -> MultiWriteMemoryRequest
	4,  // 28: Devices.ListDevices:output_type -> DevicesResponse
	8,  // 29: DeviceMemory.MappingDetect:output_type -> MemoryMappingResponse
	8,  // 30: DeviceMemory.MappingSet:output_type -> MemoryMappingResponse
	8,  // 31: DeviceMemory.MappingGet:output_type -> MemoryMappingResponse
	14, // 32: DeviceMemory.SingleRead:output_type -> SingleReadMemoryResponse
	16, // 33: DeviceMemory.SingleWrite:output_type -> SingleWriteMemoryResponse
	18, // 34: DeviceMemory.MultiRead:output_type -> MultiReadMemoryResponse
	20, // 35: DeviceMemory.MultiWrite:output_type -> MultiWriteMemoryResponse
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_sni_proto_init() }
func file_sni_proto_init() {
	if File_sni_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sni_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectMemoryMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMemoryMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMemoryMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMemoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMemoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleReadMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleReadMemoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWriteMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleWriteMemoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiReadMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiReadMemoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWriteMemoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiWriteMemoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sni_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesResponse_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sni_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sni_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_sni_proto_goTypes,
		DependencyIndexes: file_sni_proto_depIdxs,
		EnumInfos:         file_sni_proto_enumTypes,
		MessageInfos:      file_sni_proto_msgTypes,
	}.Build()
	File_sni_proto = out.File
	file_sni_proto_rawDesc = nil
	file_sni_proto_goTypes = nil
	file_sni_proto_depIdxs = nil
}
